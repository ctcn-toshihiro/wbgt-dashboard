name: WBGT Data Processing

on:
  schedule:
    - cron: '0 0,2,4,6,8,10,12 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (all stations without time restriction)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      specific_station:
        description: 'Test specific station (tateyama or ishinomaki)'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'tateyama'
          - 'ishinomaki'
  push:
    branches:
      - main
    paths:
      - 'wbgt_processor.py'
      - '.github/workflows/wbgt-processing.yml'

jobs:
  process-wbgt-data:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Set timezone to JST
      run: |
        sudo timedatectl set-timezone Asia/Tokyo
        echo "Current time (JST): $(date)"

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Determine execution mode
      id: execution_mode
      run: |
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          echo "mode=--test" >> $GITHUB_OUTPUT
          echo "description=Test mode (all stations)" >> $GITHUB_OUTPUT
        elif [ -n "${{ github.event.inputs.specific_station }}" ]; then
          echo "mode=--test-${{ github.event.inputs.specific_station }}" >> $GITHUB_OUTPUT
          echo "description=Test mode (${{ github.event.inputs.specific_station }})" >> $GITHUB_OUTPUT
        else
          echo "mode=" >> $GITHUB_OUTPUT
          echo "description=Normal execution" >> $GITHUB_OUTPUT
        fi

    - name: Process WBGT data
      id: process_data
      run: |
        echo "🚀 Starting WBGT data processing..."
        echo "Execution mode: ${{ steps.execution_mode.outputs.description }}"
        
        if python wbgt_processor.py ${{ steps.execution_mode.outputs.mode }}; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Data processing completed successfully"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "❌ Data processing failed"
        fi

        echo "📁 Generated files:"
        ls -la *.html *.json 2>/dev/null || echo "No HTML/JSON files found"

        if [ -f "index.html" ]; then
          echo "📄 index.html: $(wc -l < index.html) lines, $(wc -c < index.html) bytes"
        fi

        if [ -f "wbgt_summary.json" ]; then
          echo "📊 Summary data:"
          cat wbgt_summary.json | jq -r '.stations | to_entries[] | "  \(.key): \(.value.current_wbgt // "N/A")°C (\(.value.danger_level // "Unknown"))"' 2>/dev/null || echo "  Summary file exists but jq not available"
        fi

    - name: Check file changes
      id: check_changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "📝 Files have been modified:"
          git status --short
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "📄 No file changes detected"
        fi

    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git add *.html *.json
        CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S JST')

        if [ -f "wbgt_summary.json" ]; then
          SUMMARY=$(cat wbgt_summary.json | jq -r '
            "Generated: \(.generated_at // "unknown") | Stations: \(.total_stations // 0) | " +
            (.stations | to_entries | map("  \(.key): \(.value.current_wbgt // "N/A")°C") | join(", "))
          ' 2>/dev/null || echo "Summary parsing failed")
          
          COMMIT_MSG="🌡️ Update WBGT data - $CURRENT_TIME"
          COMMIT_MSG+="\n$SUMMARY"
          COMMIT_MSG+="\n\nAuto-generated by GitHub Actions"
          COMMIT_MSG+="\nExecution mode: ${{ steps.execution_mode.outputs.description }}"
          COMMIT_MSG+="\nWorkflow: ${{ github.workflow }}"
          COMMIT_MSG+="\nRun: ${{ github.run_number }}"
          git commit -m "$COMMIT_MSG"
        else
          git commit -m "🌡️ Update WBGT data - $CURRENT_TIME

Auto-generated by GitHub Actions
Execution mode: ${{ steps.execution_mode.outputs.description }}
Workflow: ${{ github.workflow }}
Run: ${{ github.run_number }}"
        fi

        for i in {1..3}; do
          if git push; then
            echo "✅ Successfully pushed changes (attempt $i)"
            break
          else
            echo "⚠️ Push failed (attempt $i), retrying in 5 seconds..."
            sleep 5
            git pull --rebase origin main || true
          fi
        done

    - name: Setup Pages
      if: steps.process_data.outputs.success == 'true' && steps.check_changes.outputs.changes == 'true'
      uses: actions/configure-pages@v3

    - name: Upload to GitHub Pages
      if: steps.process_data.outputs.success == 'true' && steps.check_changes.outputs.changes == 'true'
      uses: actions/upload-pages-artifact@v2
      with:
        path: '.'
        retention-days: 30

    - name: Deploy to GitHub Pages
      if: steps.process_data.outputs.success == 'true' && steps.check_changes.outputs.changes == 'true'
      id: deployment
      uses: actions/deploy-pages@v2

    - name: Create error report
      if: steps.process_data.outputs.success == 'false'
      run: |
        echo "📋 Creating error report..."
        ERROR_TIME=$(date '+%Y-%m-%d %H:%M:%S JST')

        cat > error_summary.md << EOF
# WBGT Data Processing Error Report

**Time:** $ERROR_TIME  
**Workflow:** ${{ github.workflow }}  
**Run Number:** ${{ github.run_number }}  
**Execution Mode:** ${{ steps.execution_mode.outputs.description }}  
**Trigger:** ${{ github.event_name }}

## Error Details

The WBGT data processing script failed to complete successfully.

## Generated Files Status

$(if [ -f "index.html" ]; then echo "- ✅ index.html: $(wc -c < index.html) bytes"; else echo "- ❌ index.html: Not generated"; fi)
$(if [ -f "wbgt_summary.json" ]; then echo "- ✅ wbgt_summary.json: $(wc -c < wbgt_summary.json) bytes"; else echo "- ❌ wbgt_summary.json: Not generated"; fi)
$(if [ -f "tateyama.html" ]; then echo "- ✅ tateyama.html: $(wc -c < tateyama.html) bytes"; else echo "- ❌ tateyama.html: Not generated"; fi)
$(if [ -f "ishinomaki.html" ]; then echo "- ✅ ishinomaki.html: $(wc -c < ishinomaki.html) bytes"; else echo "- ❌ ishinomaki.html: Not generated"; fi)
$(if [ -f "error_report.json" ]; then echo "- ⚠️ error_report.json: Generated by script"; else echo "- ❌ error_report.json: Not generated"; fi)

## System Information

- **Python Version:** ${{ steps.setup-python.outputs.python-version }}
- **Runner OS:** ${{ runner.os }}
- **Current Directory:** $(pwd)
- **Available Space:** $(df -h . | tail -1 | awk '{print $4}')

## Next Steps

1. Check the workflow logs for detailed error messages  
2. Verify network connectivity to data sources  
3. Confirm data source API availability  
4. Check for any breaking changes in dependencies  
EOF

        echo "📧 Error report created"
        cat error_summary.md

    - name: Upload error artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: error-logs-${{ github.run_number }}
        path: |
          error_summary.md
          error_report.json
          *.log
        retention-days: 7
        if-no-files-found: ignore

    - name: Notify completion
      run: |
        echo "🏁 Workflow completed"
        echo "Success: ${{ steps.process_data.outputs.success }}"
        echo "Changes: ${{ steps.check_changes.outputs.changes }}"
        echo "Execution mode: ${{ steps.execution_mode.outputs.description }}"

        if [ "${{ steps.process_data.outputs.success }}" = "true" ]; then
          echo "✅ WBGT data processing completed successfully"
          if [ "${{ steps.check_changes.outputs.changes }}" = "true" ]; then
            echo "📤 Data has been updated and deployed"
          else
            echo "📄 No data changes detected"
          fi
        else
          echo "❌ WBGT data processing failed"
          echo "📋 Error report and logs have been uploaded as artifacts"
        fi
