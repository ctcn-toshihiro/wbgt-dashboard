#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GitHub Actions Áî® WBGT „Éá„Éº„ÇøÂá¶ÁêÜ„Çπ„ÇØ„É™„Éó„ÉàÔºà2Âú∞ÁÇπÂØæÂøúÁâàÔºâ
2 ÊôÇÈñìÊØé„Å´ WBGT „Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Å¶ÂêÑÂú∞ÁÇπ„ÅÆ HTML „Éï„Ç°„Ç§„É´„ÇíÁîüÊàê
"""

import requests
import json
import os
from datetime import datetime, timedelta
import traceback

# Ë¶≥Ê∏¨Âú∞ÁÇπ„ÅÆË®≠ÂÆö
STATIONS = {
    "ishinomaki": {
        "station_id": "34292",
        "name": "Áü≥Â∑ª",
        "filename": "ishinomaki.html",
        "json_filename": "wbgt_data_ishinomaki.json",
    },
    "tateyama": {
        "station_id": "45401",
        "name": "È§®Â±±",
        "filename": "tateyama.html",
        "json_filename": "wbgt_data_tateyama.json",
    },
}


def download_wbgt_data(station_id):
    """ÊåáÂÆö„Åó„ÅüË¶≥Ê∏¨Âú∞ÁÇπ„ÅÆWBGT„Éá„Éº„Çø„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶Ëß£Êûê"""
    url = f"https://www.wbgt.env.go.jp/prev15WG/dl/yohou_{station_id}.csv"

    try:
        print(f"  üì° „Éá„Éº„ÇøÂèñÂæó‰∏≠: {url}")
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        csv_content = response.text

        lines = csv_content.strip().split("\n")

        # „Éò„ÉÉ„ÉÄ„ÉºË°åÔºàÊôÇÂàªÊÉÖÂ†±Ôºâ
        header = lines[0].split(",")
        time_stamps = [ts.strip() for ts in header[2:] if ts.strip()]

        # „Éá„Éº„ÇøË°å
        data_line = lines[1].split(",")
        actual_station_id = data_line[0].strip()
        update_time = data_line[1].strip()

        # WBGTÂÄ§„ÇíÂèñÂæó
        wbgt_values = []
        for val in data_line[2:]:
            val = val.strip()
            if val:
                try:
                    wbgt_values.append(int(val))
                except ValueError:
                    print(f"    ‚ö†Ô∏è ÁÑ°Âäπ„Å™ÂÄ§„Çí„Çπ„Ç≠„ÉÉ„Éó: {val}")

        # ÊôÇÂàª„ÇíËß£ÊûêÔºàJSTÂü∫Ê∫ñ„ÅßÂá¶ÁêÜÔºâ
        parsed_data = []
        for i, ts in enumerate(time_stamps):
            if i >= len(wbgt_values):
                break

            if len(ts) == 10:  # YYYYMMDDHH
                try:
                    year = int(ts[:4])
                    month = int(ts[4:6])
                    day = int(ts[6:8])
                    hour = int(ts[8:10])

                    # 24ÊôÇ„ÅÆÂá¶ÁêÜ
                    if hour == 24:
                        dt = datetime(year, month, day) + timedelta(days=1)
                    elif hour > 24:
                        extra_days = hour // 24
                        hour = hour % 24
                        dt = datetime(year, month, day, hour) + timedelta(
                            days=extra_days
                        )
                    else:
                        dt = datetime(year, month, day, hour)

                    # JST ÊôÇÂàª„Å®„Åó„Å¶Êâ±„ÅÜÔºàUTC Â§âÊèõ„ÅØË°å„Çè„Å™„ÅÑÔºâ
                    parsed_data.append(
                        {
                            "time": dt.isoformat(),
                            "year": dt.year,
                            "month": dt.month,
                            "day": dt.day,
                            "hour": dt.hour,
                            "minute": dt.minute,
                            "wbgt": wbgt_values[i] / 10.0,  # Ë°®Á§∫Áî®„Å´10„ÅßÂâ≤„Çã
                        }
                    )

                except ValueError as e:
                    print(f"    ‚ö†Ô∏è ÊôÇÂàªËß£Êûê„Ç®„É©„Éº: {ts} - {e}")

        print(f"  ‚úÖ „Éá„Éº„ÇøÂèñÂæóÊàêÂäü: {len(parsed_data)} ‰ª∂„ÅÆ„Éá„Éº„Çø„Éù„Ç§„É≥„Éà")

        return {
            "station_id": actual_station_id,
            "update_time": update_time,
            "data": parsed_data,
            "last_updated": datetime.now().isoformat(),
        }

    except Exception as e:
        print(f"  ‚ùå „Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº: {e}")
        return None


def generate_html(wbgt_data, station_name, station_key):
    """HTML„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÇíÁîüÊàê"""
    if not wbgt_data:
        print(f"  ‚ùå {station_name}: „Éá„Éº„Çø„Å™„Åó„ÅÆ„Åü„ÇÅHTMLÁîüÊàê„Çí„Çπ„Ç≠„ÉÉ„Éó")
        return None

    # ÁèæÂú®„ÅÆÂÄ§„Å®Áµ±Ë®àÊÉÖÂ†±„ÇíË®àÁÆó
    current_wbgt = wbgt_data["data"][0]["wbgt"] if wbgt_data["data"] else 0
    max_wbgt = max([d["wbgt"] for d in wbgt_data["data"]]) if wbgt_data["data"] else 0
    min_wbgt = min([d["wbgt"] for d in wbgt_data["data"]]) if wbgt_data["data"] else 0

    # Âç±Èô∫„É¨„Éô„É´„ÅÆÂà§ÂÆö
    if current_wbgt >= 31:
        danger_level = "ÈÅãÂãï‰∏≠Ê≠¢"
        danger_color = "#800080"
        danger_message = "Â§ñÂá∫„ÇíÊéß„Åà„ÄÅÊ∂º„Åó„ÅÑÂ†¥ÊâÄ„ÅßÈÅé„Åî„Åó„Åæ„Åó„Çá„ÅÜ"
    elif current_wbgt >= 28:
        danger_level = "Âé≥ÈáçË≠¶Êàí"
        danger_color = "#FF0000"
        danger_message = "ÊøÄ„Åó„ÅÑÈÅãÂãï„ÅØÈÅø„Åë„ÄÅ„Åì„Åæ„ÇÅ„Å´Ê∞¥ÂàÜË£úÁµ¶„Çí"
    elif current_wbgt >= 25:
        danger_level = "Ë≠¶Êàí"
        danger_color = "#FF6600"
        danger_message = "ÈÅãÂãïÊôÇ„ÅØÂÆöÊúüÁöÑ„Å´‰ºëÊÜ©„ÇíÂèñ„Çä„Åæ„Åó„Çá„ÅÜ"
    else:
        danger_level = "Ê≥®ÊÑè"
        danger_color = "#0066CC"
        danger_message = "ÈÅ©Â∫¶„Å™Ê∞¥ÂàÜË£úÁµ¶„ÇíÂøÉ„Åå„Åë„Åæ„Åó„Çá„ÅÜ"

    # JavaScript„Éá„Éº„Çø„ÇíÊ∫ñÂÇô
    chart_data = json.dumps(wbgt_data["data"])

    html_content = f"""<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WBGT ‰∫àÂ†±„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ - {station_name}</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        body {{
            font-family: 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 3px solid #f0f0f0;
        }}
        .title {{
            font-size: 2.5em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
        }}
        .subtitle {{
            font-size: 1.2em;
            color: #7f8c8d;
        }}
        .location-info {{
            background: #e8f4f8;
            border: 1px solid #3498db;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
        }}
        .location-name {{
            font-size: 1.3em;
            font-weight: bold;
            color: #2980b9;
        }}
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        .stat-card {{
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            border-left: 5px solid #007bff;
            transition: transform 0.3s ease;
        }}
        .stat-card:hover {{
            transform: translateY(-5px);
        }}
        .stat-value {{
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 10px;
        }}
        .stat-label {{
            font-size: 1.1em;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 1px;
        }}
        .danger-card {{
            background: {danger_color};
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }}
        .danger-level {{
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 10px;
        }}
        .danger-message {{
            font-size: 1.2em;
            opacity: 0.9;
        }}
        .chart-container {{
            position: relative;
            height: 400px;
            margin-bottom: 30px;
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
        }}
        .update-info {{
            text-align: center;
            color: #6c757d;
            font-size: 0.9em;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #dee2e6;
        }}
        .legend {{
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            flex-wrap: wrap;
        }}
        .legend-item {{
            display: flex;
            align-items: center;
            gap: 8px;
        }}
        .legend-color {{
            width: 20px;
            height: 4px;
            border-radius: 2px;
        }}
        .auto-update-status {{
            background: #e8f5e8;
            border: 1px solid #4caf50;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
        }}
        .auto-update-status .status-icon {{
            color: #4caf50;
            font-size: 1.2em;
            margin-right: 8px;
        }}
        .navigation {{
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
        }}
        .nav-button {{
            display: inline-block;
            padding: 10px 20px;
            margin: 0 10px;
            background: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background 0.3s ease;
        }}
        .nav-button:hover {{
            background: #0056b3;
        }}
        .nav-button.current {{
            background: #28a745;
        }}
        @media (max-width: 768px) {{
            .container {{
                margin: 10px;
                padding: 20px;
            }}
            .title {{
                font-size: 2em;
            }}
            .stats-grid {{
                grid-template-columns: 1fr;
            }}
            .nav-button {{
                display: block;
                margin: 5px 0;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="title">WBGT‰∫àÂ†±„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</div>
            <div class="subtitle">Ë¶≥Ê∏¨Âú∞ÁÇπ: {wbgt_data['station_id']}</div>
        </div>
        
        <div class="navigation">
            <strong>Ë¶≥Ê∏¨Âú∞ÁÇπÂàáÊõø:</strong><br>
            <a href="ishinomaki.html" class="nav-button{'current' if station_key == 'tateyama' else ''}">Áü≥Â∑ª</a>
            <a href="tateyama.html" class="nav-button{'current' if station_key == 'ishinomaki' else ''}">È§®Â±±</a>
        </div>
        
        <div class="location-info">
            <div class="location-name">{station_name}</div>
            <div>Ë¶≥Ê∏¨Âú∞ÁÇπ„Ç≥„Éº„Éâ: {wbgt_data['station_id']}</div>
        </div>
        
        <div class="auto-update-status">
            <span class="status-icon">üîÑ</span>
            <strong>Ëá™ÂãïÊõ¥Êñ∞‰∏≠:</strong> JST 9:00-21:00 „ÅÆÈñì„ÄÅ2 ÊôÇÈñìÊØé„Å´„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Å¶„ÅÑ„Åæ„Åô
        </div>
        
        <div class="danger-card">
            <div class="danger-level">{danger_level}</div>
            <div class="danger-message">{danger_message}</div>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value" style="color: {danger_color};">{current_wbgt:.1f}¬∞C</div>
                <div class="stat-label">ÁèæÂú®„ÅÆ WBGT</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" style="color: #dc3545;">{max_wbgt:.1f}¬∞C</div>
                <div class="stat-label">‰∫àÂ†±ÊúÄÈ´òÂÄ§</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" style="color: #28a745;">{min_wbgt:.1f}¬∞C</div>
                <div class="stat-label">‰∫àÂ†±ÊúÄ‰ΩéÂÄ§</div>
            </div>
        </div>
        
        <div class="chart-container">
            <canvas id="wbgtChart"></canvas>
        </div>
        
        <div class="legend">
            <div class="legend-item">
                <div class="legend-color" style="background-color: #0066CC;"></div>
                <span>Ê≥®ÊÑè (ÔΩû24¬∞C)</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #FF6600;"></div>
                <span>Ë≠¶Êàí (25-27¬∞C)</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #FF0000;"></div>
                <span>Âé≥ÈáçË≠¶Êàí (28-30¬∞C)</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background-color: #800080;"></div>
                <span>ÈÅãÂãï‰∏≠Ê≠¢ (31¬∞CÔΩû)</span>
            </div>
        </div>
        
        <div class="update-info">
            <p>„Éá„Éº„ÇøÊõ¥Êñ∞: {wbgt_data['update_time']}</p>
            <p>ÊúÄÁµÇÁîüÊàê: {datetime.fromisoformat(wbgt_data['last_updated']).strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}</p>
            <p>‚Äª JST 9:00-21:00 „ÅÆÈñì„ÄÅ2ÊôÇÈñìÊØé„Å´Ëá™ÂãïÊõ¥Êñ∞„Åï„Çå„Åæ„Åô</p>
            <p>‚ÄªÁí∞Â¢ÉÁúÅ„ÄåÁÜ±‰∏≠Áóá‰∫àÈò≤ÊÉÖÂ†±„Çµ„Ç§„Éà„ÄçÔºàhttps://www.wbgt.env.go.jp/Ôºâ„ÅÆ WBGT „Éá„Éº„Çø„ÇíÂä†Â∑•„Åó„Å¶‰ΩúÊàê</p>
        </div>
    </div>

    <script>
        const data = {chart_data};
        
        const ctx = document.getElementById('wbgtChart').getContext('2d');
        const chart = new Chart(ctx, {{
            type: 'line',
            data: {{
                labels: data.map(d => {{
                    // Áõ¥Êé• JST ÊôÇÂàª„Å®„Åó„Å¶Êâ±„ÅÜÔºà„Çø„Ç§„É†„Çæ„Éº„É≥Â§âÊèõ„Å™„ÅóÔºâ
                    return d.month + '/' + d.day + ' ' + 
                           d.hour.toString().padStart(2, '0') + ':' + 
                           d.minute.toString().padStart(2, '0');
                }}),
                datasets: [{{
                    label: 'WBGT‰∫àÂ†±ÂÄ§',
                    data: data.map(d => d.wbgt),
                    borderColor: '#2196F3',
                    backgroundColor: 'transparent',
                    borderWidth: 3,
                    pointBackgroundColor: '#2196F3',
                    pointBorderColor: '#fff',
                    pointBorderWidth: 2,
                    pointRadius: 5,
                    tension: 0.3
                }}]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: false,
                scales: {{
                    x: {{
                        title: {{
                            display: true,
                            text: 'ÊôÇÂàª (JST)'
                        }}
                    }},
                    y: {{
                        beginAtZero: false,
                        min: Math.min(...data.map(d => d.wbgt)) - 2,
                        max: Math.max(...data.map(d => d.wbgt)) + 2,
                        title: {{
                            display: true,
                            text: 'WBGT (¬∞C)'
                        }},
                        ticks: {{
                            callback: function(value) {{
                                return value + '¬∞C';
                            }}
                        }}
                    }}
                }},
                plugins: {{
                    legend: {{
                        display: false
                    }},
                    tooltip: {{
                        callbacks: {{
                            title: function(context) {{
                                const dataPoint = data[context[0].dataIndex];
                                return dataPoint.year + 'Âπ¥' + 
                                       dataPoint.month + 'Êúà' + 
                                       dataPoint.day + 'Êó• ' + 
                                       dataPoint.hour.toString().padStart(2, '0') + ':' + 
                                       dataPoint.minute.toString().padStart(2, '0') + ' (JST)';
                            }},
                            label: function(context) {{
                                return 'WBGT: ' + context.parsed.y.toFixed(1) + '¬∞C';
                            }}
                        }}
                    }}
                }},
                annotation: {{
                    annotations: {{
                        line1: {{
                            type: 'line',
                            yMin: 25,
                            yMax: 25,
                            borderColor: '#FF6600',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            label: {{
                                content: 'Ë≠¶Êàí„É¨„Éô„É´',
                                enabled: true,
                                position: 'end'
                            }}
                        }},
                        line2: {{
                            type: 'line',
                            yMin: 28,
                            yMax: 28,
                            borderColor: '#FF0000',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            label: {{
                                content: 'Âé≥ÈáçË≠¶Êàí„É¨„Éô„É´',
                                enabled: true,
                                position: 'end'
                            }}
                        }},
                        line3: {{
                            type: 'line',
                            yMin: 31,
                            yMax: 31,
                            borderColor: '#800080',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            label: {{
                                content: 'ÈÅãÂãï‰∏≠Ê≠¢„É¨„Éô„É´',
                                enabled: true,
                                position: 'end'
                            }}
                        }}
                    }}
                }}
            }}
        }});
        
        // „Éö„Éº„Ç∏„É≠„Éº„ÉâÊôÇ„Å´ÊúÄÊñ∞„ÅÆÊõ¥Êñ∞ÊôÇÂàª„ÇíË°®Á§∫
        document.addEventListener('DOMContentLoaded', function() {{
            console.log('{station_name} WBGT Dashboard loaded');
            console.log('Data points:', data.length);
            console.log('Last update:', '{wbgt_data['last_updated']}');
        }});
    </script>
</body>
</html>"""

    return html_content


def process_station(station_key, station_config):
    """ÂÄãÂà•„ÅÆË¶≥Ê∏¨Âú∞ÁÇπ„ÇíÂá¶ÁêÜ"""
    station_id = station_config["station_id"]
    station_name = station_config["name"]
    filename = station_config["filename"]
    json_filename = station_config["json_filename"]

    print(f"üè¢ {station_name} ({station_id}) „ÅÆÂá¶ÁêÜ„ÇíÈñãÂßã")

    # „Éá„Éº„Çø„ÇíÂèñÂæó
    wbgt_data = download_wbgt_data(station_id)

    if wbgt_data:
        print(f"  üìä HTML „Éï„Ç°„Ç§„É´ÁîüÊàê‰∏≠: {filename}")
        html_content = generate_html(wbgt_data, station_name, station_key)

        if html_content:
            # HTML„Éï„Ç°„Ç§„É´„Çí‰øùÂ≠ò
            with open(filename, "w", encoding="utf-8") as f:
                f.write(html_content)

            # JSON„Éá„Éº„Çø„ÇÇ‰øùÂ≠òÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
            with open(json_filename, "w", encoding="utf-8") as f:
                json.dump(wbgt_data, f, ensure_ascii=False, indent=2)

            print(f"  ‚úÖ {station_name}: „Éï„Ç°„Ç§„É´ÁîüÊàêÂÆå‰∫Ü")
            print(f"    - ÁèæÂú®WBGT: {wbgt_data['data'][0]['wbgt']:.1f}¬∞C")
            print(f"    - „Éá„Éº„ÇøÊõ¥Êñ∞: {wbgt_data['update_time']}")
            print(f"    - „Éá„Éº„Çø‰ª∂Êï∞: {len(wbgt_data['data'])} ‰ª∂")

            return True
        else:
            print(f"  ‚ùå {station_name}: HTMLÁîüÊàê„Å´Â§±Êïó")
            return False
    else:
        print(f"  ‚ùå {station_name}: „Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó")
        return False


def create_index_html():
    """„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ HTML „Éï„Ç°„Ç§„É´„ÇíÁîüÊàê"""
    print("üìÑ „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Éö„Éº„Ç∏„ÇíÁîüÊàê‰∏≠...")

    index_html = (
        """<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WBGT ‰∫àÂ†±„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ - Âú∞ÁÇπÈÅ∏Êäû</title>
    <style>
        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
        }
        .header {
            margin-bottom: 40px;
        }
        .title {
            font-size: 2.5em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 15px;
        }
        .subtitle {
            font-size: 1.2em;
            color: #7f8c8d;
            margin-bottom: 20px;
        }
        .description {
            font-size: 1em;
            color: #5a6c7d;
            line-height: 1.6;
            margin-bottom: 40px;
        }
        .stations-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }
        .station-card {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 30px;
            border-radius: 15px;
            border-left: 5px solid #007bff;
            transition: all 0.3s ease;
            text-decoration: none;
            color: inherit;
            display: block;
        }
        .station-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.15);
        }
        .station-name {
            font-size: 1.5em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        .station-id {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 15px;
        }
        .station-status {
            display: inline-block;
            padding: 5px 15px;
            background: #28a745;
            color: white;
            border-radius: 20px;
            font-size: 0.8em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #dee2e6;
            color: #6c757d;
            font-size: 0.9em;
        }
        .auto-update-info {
            background: #e8f5e8;
            border: 1px solid #4caf50;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
        }
        .update-icon {
            color: #4caf50;
            font-size: 1.5em;
            margin-bottom: 10px;
        }
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                padding: 30px 20px;
            }
            .title {
                font-size: 2em;
            }
            .stations-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="title">WBGT ‰∫àÂ†±„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</div>
            <div class="subtitle">ÁÜ±‰∏≠Áóá‰∫àÈò≤ÊÉÖÂ†± - Ë¶≥Ê∏¨Âú∞ÁÇπÈÅ∏Êäû</div>
            <div class="description">
                Áí∞Â¢ÉÁúÅ„ÅÆ WBGT „Éá„Éº„Çø„ÇíÂü∫„Å´„ÄÅÂêÑË¶≥Ê∏¨Âú∞ÁÇπ„ÅÆÁÜ±‰∏≠Áóá‰∫àÈò≤ÊÉÖÂ†±„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ<br>
                ‰∏ãË®ò„Åã„ÇâÁ¢∫Ë™ç„Åó„Åü„ÅÑÂú∞ÁÇπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            </div>
        </div>
        
        <div class="auto-update-info">
            <div class="update-icon">üîÑ</div>
            <strong>Ëá™ÂãïÊõ¥Êñ∞„Ç∑„Çπ„ÉÜ„É†</strong><br>
            JST 9:00-21:00 „ÅÆÈñì„ÄÅ2ÊôÇÈñìÊØé„Å´„Éá„Éº„Çø„ÇíËá™ÂãïÊõ¥Êñ∞„Åó„Å¶„ÅÑ„Åæ„Åô
        </div>
        
        <div class="stations-grid">
            <a href="ishinomaki.html" class="station-card">
                <div class="station-name">Áü≥Â∑ª</div>
                <div class="station-id">Ë¶≥Ê∏¨Âú∞ÁÇπ„Ç≥„Éº„Éâ: 34292</div>
                <div class="station-status">ÈÅãÁî®‰∏≠</div>
            </a>
            <a href="tateyama.html" class="station-card">
                <div class="station-name">È§®Â±±</div>
                <div class="station-id">Ë¶≥Ê∏¨Âú∞ÁÇπ„Ç≥„Éº„Éâ: 45401</div>
                <div class="station-status">ÈÅãÁî®‰∏≠</div>
            </a>
        </div>
        
        <div class="footer">
            <p>‚Äª„Åì„ÅÆ„Çµ„Ç§„Éà„ÅØÁí∞Â¢ÉÁúÅ„ÄåÁÜ±‰∏≠Áóá‰∫àÈò≤ÊÉÖÂ†±„Çµ„Ç§„Éà„Äç„ÅÆ„Éá„Éº„Çø„ÇíÂä†Â∑•„Åó„Å¶‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô</p>
            <p>‚ÄªWBGTÔºàÊπøÁêÉÈªíÁêÉÊ∏©Â∫¶Ôºâ: ÁÜ±‰∏≠Áóá‰∫àÈò≤„ÇíÁõÆÁöÑ„Å®„Åó„ÅüÊöë„ÅïÊåáÊï∞</p>
            <p>ÊúÄÁµÇÊõ¥Êñ∞: """
        + datetime.now().strftime("%YÂπ¥%mÊúà%dÊó• %H:%M:%S")
        + """</p>
        </div>
    </div>
</body>
</html>"""
    )

    with open("index.html", "w", encoding="utf-8") as f:
        f.write(index_html)

    print("  ‚úÖ „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Éö„Éº„Ç∏ÁîüÊàêÂÆå‰∫Ü: index.html")


def create_summary_json():
    """ÂÖ®Âú∞ÁÇπ„ÅÆÊ¶ÇË¶Å„Éá„Éº„Çø„ÇíÂê´„ÇÄ JSON „Éï„Ç°„Ç§„É´„ÇíÁîüÊàê"""
    print("üìä Ê¶ÇË¶Å„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê‰∏≠...")

    summary_data = {
        "generated_at": datetime.now().isoformat(),
        "stations": {},
        "total_stations": len(STATIONS),
        "update_schedule": "JST 9:00-21:00, every 2 hours",
    }

    for station_key, station_config in STATIONS.items():
        json_filename = station_config["json_filename"]

        if os.path.exists(json_filename):
            try:
                with open(json_filename, "r", encoding="utf-8") as f:
                    station_data = json.load(f)

                if station_data and "data" in station_data and station_data["data"]:
                    current_wbgt = station_data["data"][0]["wbgt"]
                    max_wbgt = max([d["wbgt"] for d in station_data["data"]])
                    min_wbgt = min([d["wbgt"] for d in station_data["data"]])

                    # Âç±Èô∫„É¨„Éô„É´„ÅÆÂà§ÂÆö
                    if current_wbgt >= 31:
                        danger_level = "ÈÅãÂãï‰∏≠Ê≠¢"
                    elif current_wbgt >= 28:
                        danger_level = "Âé≥ÈáçË≠¶Êàí"
                    elif current_wbgt >= 25:
                        danger_level = "Ë≠¶Êàí"
                    else:
                        danger_level = "Ê≥®ÊÑè"

                    summary_data["stations"][station_key] = {
                        "name": station_config["name"],
                        "station_id": station_data["station_id"],
                        "current_wbgt": current_wbgt,
                        "max_wbgt": max_wbgt,
                        "min_wbgt": min_wbgt,
                        "danger_level": danger_level,
                        "update_time": station_data["update_time"],
                        "data_points": len(station_data["data"]),
                        "html_file": station_config["filename"],
                    }
                else:
                    summary_data["stations"][station_key] = {
                        "name": station_config["name"],
                        "station_id": station_config["station_id"],
                        "error": "No data available",
                    }
            except Exception as e:
                print(f"    ‚ö†Ô∏è {station_key} „Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}")
                summary_data["stations"][station_key] = {
                    "name": station_config["name"],
                    "station_id": station_config["station_id"],
                    "error": str(e),
                }
        else:
            summary_data["stations"][station_key] = {
                "name": station_config["name"],
                "station_id": station_config["station_id"],
                "error": "Data file not found",
            }

    with open("wbgt_summary.json", "w", encoding="utf-8") as f:
        json.dump(summary_data, f, ensure_ascii=False, indent=2)

    print("  ‚úÖ Ê¶ÇË¶Å„Éá„Éº„Çø„Éï„Ç°„Ç§„É´ÁîüÊàêÂÆå‰∫Ü: wbgt_summary.json")
    return summary_data


def check_update_time():
    """Êõ¥Êñ∞ÊôÇÂàª„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºàJST 9:00-21:00 „ÅÆÈñì„ÅÆ„ÅøÂÆüË°åÔºâ"""
    now = datetime.now()
    hour = now.hour

    print(f"‚è∞ ÁèæÂú®ÊôÇÂàª: {now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')} JST")

    if 9 <= hour <= 21:
        print("  ‚úÖ Êõ¥Êñ∞ÊôÇÈñìÂÜÖ„Åß„ÅôÔºàJST 9:00-21:00Ôºâ")
        return True
    else:
        print("  ‚è∏Ô∏è Êõ¥Êñ∞ÊôÇÈñìÂ§ñ„Åß„ÅôÔºàJST 9:00-21:00 ‰ª•Â§ñÔºâ")
        print("  ‚ÑπÔ∏è Â§úÈñì„ÅÆÊõ¥Êñ∞„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åï„Çå„Åæ„Åô")
        return False


def main():
    """„É°„Ç§„É≥Âá¶ÁêÜ"""
    print("üöÄ WBGT „Éá„Éº„ÇøÂá¶ÁêÜ„Çπ„ÇØ„É™„Éó„ÉàÈñãÂßã")
    print("=" * 50)

    try:
        # Êõ¥Êñ∞ÊôÇÂàª„ÉÅ„Çß„ÉÉ„ÇØ
        if not check_update_time():
            print("‚èπÔ∏è Êõ¥Êñ∞ÊôÇÈñìÂ§ñ„ÅÆ„Åü„ÇÅÂá¶ÁêÜ„ÇíÁµÇ‰∫Ü„Åó„Åæ„Åô")
            return

        print(f"üìç Âá¶ÁêÜÂØæË±°Âú∞ÁÇπ: {len(STATIONS)} Âú∞ÁÇπ")

        # ÂêÑÂú∞ÁÇπ„ÅÆÂá¶ÁêÜ
        success_count = 0
        for station_key, station_config in STATIONS.items():
            print(f"\n{'='*30}")
            if process_station(station_key, station_config):
                success_count += 1

        print(f"\n{'='*50}")
        print(f"üìä Âá¶ÁêÜÁµêÊûú: {success_count}/{len(STATIONS)} Âú∞ÁÇπÊàêÂäü")

        # „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Éö„Éº„Ç∏ÁîüÊàê
        print(f"\n{'='*30}")
        create_index_html()

        # Ê¶ÇË¶Å„Éá„Éº„ÇøÁîüÊàê
        print(f"\n{'='*30}")
        summary_data = create_summary_json()

        # Âá¶ÁêÜÁµêÊûú„ÅÆË°®Á§∫
        print(f"\n{'='*50}")
        print("üìã Âá¶ÁêÜÂÆå‰∫Ü„Çµ„Éû„É™„Éº:")
        print(f"  - ÊàêÂäüÂú∞ÁÇπÊï∞: {success_count}/{len(STATIONS)}")
        print(f"  - ÁîüÊàê„Éï„Ç°„Ç§„É´:")
        print(f"    ‚Ä¢ index.html („Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Éö„Éº„Ç∏)")
        print(f"    ‚Ä¢ wbgt_summary.json (Ê¶ÇË¶Å„Éá„Éº„Çø)")

        for station_key, station_config in STATIONS.items():
            if (
                station_key in summary_data["stations"]
                and "error" not in summary_data["stations"][station_key]
            ):
                station_summary = summary_data["stations"][station_key]
                print(f"    ‚Ä¢ {station_config['filename']} ({station_config['name']})")
                print(f"      - ÁèæÂú®WBGT: {station_summary['current_wbgt']:.1f}¬∞C")
                print(f"      - Âç±Èô∫„É¨„Éô„É´: {station_summary['danger_level']}")
                print(f"      - „Éá„Éº„Çø‰ª∂Êï∞: {station_summary['data_points']} ‰ª∂")

        print(f"\nüéâ ÂÖ®„Å¶„ÅÆÂá¶ÁêÜ„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ")

        # GitHub Actions „Åß„ÅÆÁí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
        if os.getenv("GITHUB_ACTIONS") == "true":
            print(f"\nüîß GitHub Actions Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö‰∏≠...")

            # ÊàêÂäüÁéá„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
            success_rate = (success_count / len(STATIONS)) * 100
            print(f"WBGT_SUCCESS_RATE={success_rate:.1f}")

            # ÊúÄÊñ∞„ÅÆ WBGT ÂÄ§„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
            for station_key in STATIONS:
                if (
                    station_key in summary_data["stations"]
                    and "current_wbgt" in summary_data["stations"][station_key]
                ):
                    wbgt_value = summary_data["stations"][station_key]["current_wbgt"]
                    danger_level = summary_data["stations"][station_key]["danger_level"]
                    print(f"WBGT_{station_key.upper()}={wbgt_value:.1f}")
                    print(f"DANGER_{station_key.upper()}={danger_level}")

    except Exception as e:
        print(f"\n‚ùå Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:")
        print(f"„Ç®„É©„ÉºÂÜÖÂÆπ: {str(e)}")
        print(f"„Çπ„Çø„ÉÉ„ÇØ„Éà„É¨„Éº„Çπ:")
        traceback.print_exc()

        # GitHub Actions „Åß„ÅÆ„Ç®„É©„ÉºÂá¶ÁêÜ
        if os.getenv("GITHUB_ACTIONS") == "true":
            print(f"::error::WBGT data processing failed: {str(e)}")
            # Âá¶ÁêÜ„ÅØÁ∂öË°åÔºàÈÉ®ÂàÜÁöÑ„Å™ÊàêÂäü„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Åü„ÇÅÔºâ

        # ÊúÄ‰ΩéÈôê„ÅÆ„Ç®„É©„ÉºÊÉÖÂ†±„ÇíÂê´„ÇÄ„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê
        try:
            error_data = {
                "error": True,
                "error_message": str(e),
                "timestamp": datetime.now().isoformat(),
                "partial_success": [],
            }

            # ÈÉ®ÂàÜÁöÑ„Å´ÊàêÂäü„Åó„Åü„Éï„Ç°„Ç§„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            for station_key, station_config in STATIONS.items():
                if os.path.exists(station_config["filename"]):
                    error_data["partial_success"].append(station_key)

            with open("error_report.json", "w", encoding="utf-8") as f:
                json.dump(error_data, f, ensure_ascii=False, indent=2)

            print("  üìÑ „Ç®„É©„Éº„É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü: error_report.json")

        except Exception as report_error:
            print(f"  ‚ö†Ô∏è „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÇÇÂ§±Êïó: {report_error}")


def test_single_station(station_key):
    """Âçò‰∏ÄÂú∞ÁÇπ„ÅÆ„ÉÜ„Çπ„ÉàÁî®Èñ¢Êï∞"""
    if station_key not in STATIONS:
        print(f"‚ùå ÁÑ°Âäπ„Å™Âú∞ÁÇπ„Ç≠„Éº: {station_key}")
        print(f"Âà©Áî®ÂèØËÉΩ„Å™Âú∞ÁÇπ: {list(STATIONS.keys())}")
        return

    print(f"üß™ „ÉÜ„Çπ„Éà„É¢„Éº„Éâ: {station_key} „ÅÆ„ÅøÂá¶ÁêÜ")
    station_config = STATIONS[station_key]

    if process_station(station_key, station_config):
        print(f"‚úÖ {station_key} „ÅÆ„ÉÜ„Çπ„Éà„ÅåÊàêÂäü„Åó„Åæ„Åó„Åü")
    else:
        print(f"‚ùå {station_key} „ÅÆ„ÉÜ„Çπ„Éà„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü")


if __name__ == "__main__":
    import sys

    # „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„Åß„ÉÜ„Çπ„Éà„É¢„Éº„Éâ„ÇíÊåáÂÆöÂèØËÉΩ
    if len(sys.argv) > 1:
        if sys.argv[1] == "--test":
            # ÂÖ®Âú∞ÁÇπ„ÅÆ„ÉÜ„Çπ„ÉàÔºàÊôÇÈñìÂà∂Èôê„Å™„ÅóÔºâ
            print("üß™ „ÉÜ„Çπ„Éà„É¢„Éº„Éâ: ÂÖ®Âú∞ÁÇπÂá¶ÁêÜÔºàÊôÇÈñìÂà∂Èôê„Å™„ÅóÔºâ")
            for station_key, station_config in STATIONS.items():
                print(f"\n{'='*30}")
                process_station(station_key, station_config)
        elif sys.argv[1].startswith("--test-"):
            # ÁâπÂÆöÂú∞ÁÇπ„ÅÆ„ÉÜ„Çπ„Éà
            station_key = sys.argv[1][7:]  # "--test-" „ÇíÈô§Âéª
            test_single_station(station_key)
        elif sys.argv[1] == "--help":
            print("WBGT „Éá„Éº„ÇøÂá¶ÁêÜ„Çπ„ÇØ„É™„Éó„Éà")
            print("‰ΩøÁî®ÊñπÊ≥ï:")
            print("  python wbgt_processor.py              # ÈÄöÂ∏∏ÂÆüË°å")
            print("  python wbgt_processor.py --test       # ÂÖ®Âú∞ÁÇπ„ÉÜ„Çπ„Éà")
            print("  python wbgt_processor.py --test-ishinomaki # Â§ßÈò™„ÅÆ„Åø„ÉÜ„Çπ„Éà")
            print("  python wbgt_processor.py --test-tateyama # Êù±‰∫¨„ÅÆ„Åø„ÉÜ„Çπ„Éà")
            print("  python wbgt_processor.py --help       # „Éò„É´„ÉóË°®Á§∫")
        else:
            print(f"‚ùå ÁÑ°Âäπ„Å™„Ç™„Éó„Ç∑„Éß„É≥: {sys.argv[1]}")
            print("--help „Åß„Éò„É´„Éó„ÇíË°®Á§∫")
    else:
        # ÈÄöÂ∏∏ÂÆüË°å
        main()
